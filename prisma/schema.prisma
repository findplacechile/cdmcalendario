generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comunas {
  id     Int     @id @default(autoincrement())
  nombre String?
}


model especialidades {
  id                           Int                            @id @default(autoincrement())
  nombre                 String?
  profesionales_especialidades profesionales_especialidades[]
}

model intervenciones {
  id                           Int                            @id @default(autoincrement())
  nombre                 String?
  profesionales_intervenciones profesionales_intervenciones[]
}

model medios_de_pago {
  id              Int             @id @default(autoincrement())
  nombre  String?
  professionals_payment_methods professionals_payment_methods[]

  @@map("payment_methods")
}

model modalidades {
  id                        Int                         @id @default(autoincrement())
  nombre                 String?
  profesionales_modalidades profesionales_modalidades[]
}

model previsiones {
  id                        Int                         @id @default(autoincrement())
  nombre              String?
  profesionales_previsiones profesionales_previsiones[]
}

model profesionales {
  id                           Int                            @id @default(autoincrement())
  telefono                     String?
  email                        String?
  whatsapp                     String?
  usuario_id                   Int?
  estudios                     String?
  usuarios                     usuarios?                      @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usuariofk")
  especialidades profesionales_especialidades[]
  intervenciones profesionales_intervenciones[]
  previsiones    profesionales_previsiones[]
  rubros         profesionales_rubros[]

  registros registros[]

  schedules                     schedules?
  rest_days                     rest_days[]
  records                       records[]
  special_dates                 special_dates[]
  payment_methods professionals_payment_methods[]
  modalidades     profesionales_modalidades[]

  @@index([usuario_id], map: "fki_usuariofk")
}

model schedules {
  id              Int           @id @default(autoincrement())
  profesional     profesionales @relation(fields: [professional_id], references: [id])
  professional_id Int           @unique
  schedule_start  DateTime
  schedule_end    DateTime
  rest_start      DateTime
  rest_end        DateTime
  duration        Int
}

model rest_days {
  id              Int           @id @default(autoincrement())
  profesional     profesionales @relation(fields: [professional_id], references: [id])
  professional_id Int
  day_week        Int
}

model special_dates {
  id              Int           @id @default(autoincrement())
  profesional     profesionales @relation(fields: [professional_id], references: [id])
  professional_id Int
  date            DateTime

  special_schedule special_schedule?
}

model special_schedule {
  id              Int           @id @default(autoincrement())
  date            special_dates @relation(fields: [special_date_id], references: [id])
  special_date_id Int           @unique
  schedule_start  DateTime
  schedule_end    DateTime
  rest_start      DateTime
  rest_end        DateTime
}

model records {
  id              Int           @id @default(autoincrement())
  profesional     profesionales @relation(fields: [professional_id], references: [id])
  professional_id Int
  user_id         Int
  record_start    DateTime
  record_end      DateTime
}

model profesionales_especialidades {
  id              Int             @id @default(autoincrement())
  profesional_id  Int?
  especialidad_id Int?
  especialidades  especialidades? @relation(fields: [especialidad_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profesionales   profesionales?  @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model profesionales_intervenciones {
  id              Int             @id @default(autoincrement())
  profesional_id  Int?
  intervencion_id Int?
  intervenciones  intervenciones? @relation(fields: [intervencion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "intervencion")
  profesionales   profesionales?  @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profesional")

  @@index([intervencion_id], map: "fki_intervencion")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model profesionales_medios_de_pago {
  id               Int  @id @default(autoincrement())
  profesional_id   Int
  medio_de_pago_id Int?
}

model professionals_payment_methods {
  id                Int              @id @default(autoincrement())
  profesional_id    Int
  payment_method_id Int?
  payment_methods   medios_de_pago? @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profesionales     profesionales?   @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model profesionales_modalidades {
  id             Int            @id @default(autoincrement())
  profesional_id Int?
  modalidad_id   Int?
  modalidades    modalidades?   @relation(fields: [modalidad_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profesionales  profesionales? @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profesionales_previsiones {
  id             Int            @id(map: "pk") @default(autoincrement())
  profesional_id Int?
  prevision_id   Int?
  previsiones    previsiones?   @relation(fields: [prevision_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prevision")
  profesionales  profesionales? @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profesional")

  @@index([prevision_id], map: "fki_prevision")
  @@index([profesional_id], map: "fki_profesional")
}

model profesionales_rubros {
  id             Int            @id @default(autoincrement())
  profesional_id Int?
  rubro_id       Int?
  profesionales  profesionales? @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rubros         rubros?        @relation(fields: [rubro_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model registros {
  id             Int            @id @default(autoincrement())
  profesional_id Int?
  usuario_id     Int?
  fecha_y_hora   DateTime?      @db.Timestamp(6)
  profesionales  profesionales? @relation(fields: [profesional_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuarios       usuarios?      @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([usuario_id], map: "fki_registros_usuario_id_fkey")
}

model rubros {
  id                   Int                    @id @default(autoincrement())
  rubro                String?
  profesionales_rubros profesionales_rubros[]
}

model servicios {
  id       Int     @id @default(autoincrement())
  servicio String?
  precio   String?
}

model usuarios {
  id               Int             @id @default(autoincrement())
  nombre           String?
  apellidos        String?
  fecha_nacimiento DateTime?       @db.Date
  telefono         String?
  email            String?
  whatsapp         String?
  rut              String?         @unique
  password         String?
  imagenUrl        String?
  profesionales    profesionales[]
  registros        registros[]
}
